[1mdiff --git a/README.md b/README.md[m
[1mindex b6aff92..7f3efb5 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -164,6 +164,16 @@[m [mThis defines the callback when the specific input items are found.  Types:[m
     An error that was detected during parsing.  This allows the spell checker[m
     to check the correctness of the POD at the same time if it so chooses.[m
 [m
[32m+[m[32m## splitter[m
[32m+[m
[32m+[m[32m```[m
[32m+[m[32m$parser->splitter($splitter);[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mThe `$splitter` is an instance of [Text::HumanComputerWords](https://metacpan.org/pod/Text::HumanComputerWords), or something[m
[32m+[m[32mthat implements a `split` method exactly like it does.  It is used to split[m
[32m+[m[32mtext into human and computer words.  The default is reasonable for Perl.[m
[32m+[m
 # METHODS[m
 [m
 ## skip\_sections[m
[1mdiff --git a/author.yml b/author.yml[m
[1mindex b42e640..6261074 100644[m
[1m--- a/author.yml[m
[1m+++ b/author.yml[m
[36m@@ -8,6 +8,7 @@[m [mpod_spelling_system:[m
   stopwords:[m
     - yamlwords[m
     - unicode[m
[32m+[m[32m    - splitter[m
 [m
 pod_coverage:[m
   skip: 0[m
[1mdiff --git a/lib/Pod/Simple/Words.pm b/lib/Pod/Simple/Words.pm[m
[1mindex 6010938..acda79b 100644[m
[1m--- a/lib/Pod/Simple/Words.pm[m
[1m+++ b/lib/Pod/Simple/Words.pm[m
[36m@@ -5,7 +5,7 @@[m [muse warnings;[m
 use 5.026;[m
 use experimental qw( signatures );[m
 use JSON::MaybeXS qw( encode_json );[m
[31m-use Text::HumanComputerWords;[m
[32m+[m[32muse Text::HumanComputerWords 0.02;[m
 use PPI;[m
 use URI;[m
 use base qw( Pod::Simple );[m
[36m@@ -98,7 +98,7 @@[m [mset.[m
 =cut[m
 [m
 __PACKAGE__->_accessorize([m
[31m-  qw( line_number in_verbatim in_head1 callback target head1 skip_section_hash link_address in_section_title human_computer_words ),[m
[32m+[m[32m  qw( line_number in_verbatim in_head1 callback target head1 skip_section_hash link_address in_section_title splitter ),[m
 );[m
 [m
 =head1 CONSTRUCTOR[m
[36m@@ -177,6 +177,14 @@[m [mto check the correctness of the POD at the same time if it so chooses.[m
 [m
 =back[m
 [m
[32m+[m[32m=head2 splitter[m
[32m+[m
[32m+[m[32m $parser->splitter($splitter);[m
[32m+[m
[32m+[m[32mThe C<$splitter> is an instance of L<Text::HumanComputerWords>, or something[m
[32m+[m[32mthat implements a C<split> method exactly like it does.  It is used to split[m
[32m+[m[32mtext into human and computer words.  The default is reasonable for Perl.[m
[32m+[m
 =cut[m
 [m
 sub new ($class)[m
[36m@@ -191,7 +199,14 @@[m [msub new ($class)[m
   $self->accept_targets( qw( stopwords ));[m
   $self->target(undef);[m
   $self->skip_section_hash({});[m
[31m-  $self->human_computer_words(Text::HumanComputerWords->new);[m
[32m+[m[32m  if(! defined $self->splitter)[m
[32m+[m[32m  {[m
[32m+[m[32m    $self->splitter([m
[32m+[m[32m      Text::HumanComputerWords->new([m
[32m+[m[32m        Text::HumanComputerWords->default_perl,[m
[32m+[m[32m      ),[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
   $self->callback(sub {[m
     my $row = encode_json \@_;[m
     print "--- $row\n";[m
[36m@@ -290,7 +305,7 @@[m [msub _handle_element_end ($self, $tagname, @)[m
 [m
 sub _add_words ($self, $line)[m
 {[m
[31m-  foreach my $event ($self->human_computer_words->split($line))[m
[32m+[m[32m  foreach my $event ($self->splitter->split($line))[m
   {[m
     my($type, $word) = @$event;[m
 [m
[1mdiff --git a/t/00_diag.t b/t/00_diag.t[m
[1mindex 757f37c..881037b 100644[m
[1m--- a/t/00_diag.t[m
[1m+++ b/t/00_diag.t[m
[36m@@ -19,6 +19,7 @@[m [m$modules{$_} = $_ for qw([m
   Path::Tiny[m
   Test2::V0[m
   Test::Script[m
[32m+[m[32m  Text::HumanComputerWords[m
   URI[m
 );[m
 [m
